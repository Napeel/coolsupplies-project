class Order {
status {
  //STARTED STATE
  Started {
    updateOrder(String purchaseLevelName, String studentName) / {
      doUpdateOrder(purchaseLevelName, studentName);
    } -> Started;

    addItem(String aItem, int aQuantity) / {
      doAddItem(aItem, aQuantity);
    } -> Started;

    updateItem(String itemName, int newQuantity) / {
      doUpdateItem(itemName, newQuantity);
    } -> Started;

    removeItem(String itemName) / {
      doRemoveItem(itemName);
    } -> Started;
      
    paymentForOrder(String authorizationCode) [validateAuthorizationCode(authorizationCode) && validateOrderHasItems()] / {
      doPaymentForOrder(authorizationCode);
    } -> Paid;

    paymentForOrder(String authorizationCode) [!validateAuthorizationCode(authorizationCode)] / {
      doPaymentAuthError();
    } -> Started;

    paymentForOrder(String authorizationCode) [!validateOrderHasItems()] / {
      doNoItemPaidError();
    } -> Started;

    cancel() / {
      doCancel();
    } -> Cancelled;

      
    schoolYearStarts() / {
      doSchoolYearStart();
    }-> Penalized;

    pickedUpByStudent()/ {
      doPickedUpError(); 
    } -> Started;

    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode)/{
      doPaymentPenaltyError();
    } -> Started;
  }

  //PENALIZED STATE      
  Penalized {
    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode) 
      [validatePenaltyPayment(penaltyAuthorizationCode) && validateAuthorizationCode(orderAuthorizationCode)] / {
      doPaymentPenalty(penaltyAuthorizationCode, orderAuthorizationCode);
    } -> Prepared;

    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode) 
      [!validatePenaltyPayment(penaltyAuthorizationCode)] / {
      doPaymentPenaltyAuthError();
    } -> Penalized;

    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode) 
      [!validateAuthorizationCode(orderAuthorizationCode)] / {
      doPaymentAuthError();
    } -> Penalized;

    schoolYearStarts() / {
      doSchoolYearStartError();
    } -> Penalized;
      
    updateItem(String itemName, int newQuantity) / {
      doUpdateItemError();
    } -> Penalized;

    addItem(String aItem, int aQuantity) / {
      doAddItemError();
    } -> Penalized;

    removeItem(String itemName) / {
      doRemoveItemError();
    } -> Penalized;

    pickedUpByStudent()/ {
      doPickedUpError();
    } -> Penalized;

    updateOrder() /{
      doUpdateOrderError();
    } -> Penalized;

    cancel()/{
      doCancelError();
    } -> Penalized;

    paymentForOrder(String authorizationCode) /{
      doPaymentForOrderError();
    } -> Penalized;
  }

  //PAID STATE      
  Paid {

    cancel() / {
      doCancel();
    } -> Cancelled;

    addItem(String aItem, int aQuantity) / {
      doAddItemError();
    } -> Paid;

    updateItem(String itemName, int newQuantity) / {
      doUpdateItemError();
    } -> Paid;

    removeItem(String itemName) / {
      doRemoveItemError();
    } -> Paid;

    pickedUpByStudent()/ {
      doPickedUpError(); 
    } -> Paid;

    updateOrder() /{
      doUpdateOrderError();
    } -> Paid;

    paymentForOrder(String authorizationCode) /{
      doPaymentForOrderError();
    } -> Paid;

    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode)/{
      doPaymentPenaltyError();
    } -> Paid;

    schoolYearStarts() / {
      doSchoolYearStart();
    }-> Prepared;
  }

  final Cancelled { }

  // STATE PREPARED      
  Prepared {
    pickedUpByStudent() -> PickedUp;

    addItem(String aItem, int aQuantity) / {
      doAddItemError();
    } -> Prepared;

    updateItem(String itemName, int newQuantity) / {
      doUpdateItemError();
    } -> Prepared;

    removeItem(String itemName) / {
      doRemoveItemError();
    } -> Prepared;

    cancel()/{
      doCancelError();
    } -> Prepared;

    schoolYearStarts() / {
      doSchoolYearStartError();
    } -> Prepared;

    updateOrder() /{
      doUpdateOrderError();
    } -> Prepared;

    paymentForOrder(String authorizationCode) /{
      doPaymentForOrderError();
    } -> Prepared;

    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode)/{
      doPaymentPenaltyError();
    } -> Prepared;
  }

  //STATE PICKEDUP
  PickedUp {

    addItem(String aItem, int aQuantity) / {
      doAddItemError();
    } -> PickedUp;

    updateItem(String itemName, int newQuantity) / {
      doUpdateItemError();
    } -> PickedUp;

    removeItem(String itemName) / {
      doRemoveItemError();
    } -> PickedUp;

    cancel()/{
      doCancelError();
    } -> PickedUp;

    pickedUpByStudent() / {
      doPickedUpPickedUp();
    } -> PickedUp;

    schoolYearStarts() / {
      doSchoolYearStartError();
    } -> PickedUp;

    updateOrder() /{
      doUpdateOrderError();
    } -> PickedUp;

    paymentForOrder(String authorizationCode) /{
      doPaymentForOrderError();
    } -> PickedUp;

    paymentForPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode)/{
      doPaymentPenaltyError();
    } -> PickedUp;
  }
}

  /***********************************************************************
  * Validates if the provided authorization code is valid
  * 
  * @param code The authorization code to validate
  * @return True if code is valid, false otherwise
  * @author Jeffrey Lim
  ***********************************************************************/

  private boolean validateAuthorizationCode(String code) {
    return code != null && code.trim().length() == 4;
  }

  /***********************************************************************
  * Validates if the provided penalty payment code is valid
  * 
  * @param penaltyCode The penalty authorization code to validate
  * @return True if penalty code is valid, false otherwise
  * @author Jeffrey Lim
  ***********************************************************************/
  private boolean validatePenaltyPayment(String penaltyCode) {
    return validateAuthorizationCode(penaltyCode); 
  }

  /***********************************************************************
  * Validates if the provided order has items
  * 
  * 
  * @return True if order has items
  * @author Matthew
  ***********************************************************************/

  private boolean validateOrderHasItems(){
    return this.hasOrderItems();
  }

  /***********************************************************************
  * Returns a code if the order has no items
  * 
  * 
  * @return Returns error message
  * @author Bryan Vu
  ***********************************************************************/

  private void doNoItemPaidError(){
    throw new RuntimeException("Order " + this.getNumber() + " has no items");
  }

  /***********************************************************************
  * Updates the order with new purchase level and student
  * 
  * @param purchaseLevelName The name of the purchase level to update to
  * @param studentName The name of the student to update to
  * @throws RuntimeException if purchase level or student is invalid
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doUpdateOrder(String purchaseLevelName, String studentName) {
    
    PurchaseLevel currentPurchaseLevel = null;
    CoolSupplies coolSupplies = this.getCoolSupplies();

    for (PurchaseLevel level : PurchaseLevel.values()) {
      if (level.name().equalsIgnoreCase(purchaseLevelName)) {
        currentPurchaseLevel = level;
      }
    }

    if (currentPurchaseLevel == null) {
      throw new RuntimeException("Purchase level " + purchaseLevelName + " does not exist.");
    }

    Parent parent = this.getParent();
    if (parent == null) {
      throw new RuntimeException("Parent does not exist.");
    }
    if (Student.getWithName(studentName) == null) {
      throw new RuntimeException("Student " + studentName +" does not exist.");
    }
    if (Student.getWithName(studentName).getParent() != parent) {
      throw new RuntimeException("Student " + studentName + " is not a child of the parent " + parent.getEmail() + "." );
    }
    
    this.setLevel(currentPurchaseLevel);
    this.setStudent(Student.getWithName(studentName));
  };

  /***********************************************************************
  * Throws error when order can not be updated due to the state
  * 
  * @throws RuntimeException with message indicating items cannot be added
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doUpdateOrderError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot update a picked up order");
    }
    throw new RuntimeException("Cannot update a " + this.getStatus().name().toLowerCase() + " order");
  }


  /***********************************************************************
  * Adds an item to the order
  * 
  * @param itemName The name of the item to add
  * @param quantity The quantity of the item to add
  * @throws RuntimeException if item doesn't exist or quantity is invalid
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doAddItem(String itemName, int quantity) {
    // Logic for adding an item

    CoolSupplies coolSupplies = this.getCoolSupplies();
    InventoryItem itemToBeAdded = InventoryItem.getWithName(itemName);

    if (itemToBeAdded == null){
      throw new RuntimeException("Item " + itemName + " does not exist.");
    }
    
    for (OrderItem o: this.getOrderItems()){
      if (o.getItem().getName().equals(itemName)){
        throw new RuntimeException("Item " + itemName + " already exists in the order " + this.getNumber() + ".");
      }
    }


    if (quantity <= 0){
      throw new RuntimeException("Quantity must be greater than 0.");
    }

    new OrderItem(quantity, coolSupplies, this, itemToBeAdded);
  }

  /***********************************************************************
  * Throws error when item cannot be added to order
  * 
  * @throws RuntimeException with message indicating items cannot be added
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doAddItemError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot add items to a picked up order");
    }
    throw new RuntimeException("Cannot add items to a " + this.getStatus().name().toLowerCase() + " order");
  }

  /***********************************************************************
  * Updates the quantity of an existing item in the order
  * 
  * @param itemName The name of the item to update
  * @param newQuantity The new quantity for the item
  * @throws RuntimeException if item doesn't exist or quantity is invalid
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doUpdateItem(String itemName, int newQuantity) {
    // Logic for updating an item
    
    // make sure quantity is > 0
    if (newQuantity <= 0) {
      throw new RuntimeException("Quantity must be greater than 0.");
    }

    // get items in the order
    List<OrderItem> items = this.getOrderItems();

    

    InventoryItem inventoryItemSeeked = InventoryItem.getWithName(itemName);
    if(inventoryItemSeeked == null){
      throw new RuntimeException("Item " + itemName + " does not exist.");
    }
    boolean itemExists = false;
    // check that the item exists in the order
    OrderItem item = null;

  
    for (OrderItem i : items) {
      if (i.getItem().getName().equals(itemName)) {
        item = i;
        itemExists = true;
        break;
      }
    }
    if (!itemExists){
      throw new RuntimeException("Item " + itemName + " does not exist in the order " +this.getNumber() +".");
    }

    // update item
    item.setQuantity(newQuantity);
  }
  
  /***********************************************************************
  * Throws error when item cannot be updated in order
  * 
  * @throws RuntimeException with message indicating items cannot be updated
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doUpdateItemError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot update items in a picked up order");
    }
    throw new RuntimeException("Cannot update items in a " + this.getStatus().name().toLowerCase() + " order");
  }

  /***********************************************************************
  * Removes an item from the order
  * 
  * @param itemName The name of the item to remove
  * @throws RuntimeException if item doesn't exist in order
  * @author Jeffrey Lim
  ***********************************************************************/
   private void doRemoveItem(String itemName){
    // Logic for removing an item

    //get all items in general
    InventoryItem itemToBeRemoved = InventoryItem.getWithName(itemName);
    
    if(itemToBeRemoved == null){
      throw new RuntimeException("Item " + itemName + " does not exist.");
    }

    // get items in the order
    List<OrderItem> items = this.getOrderItems();

    // check that the item exists in the order
    OrderItem item = null;
    for (OrderItem i : items) {
      if (i.getItem().getName().equals(itemName)) {
        item = i;
        break;
      }
    }

    if (item == null) {
      throw new RuntimeException("Item " + itemName + " does not exist in the order " + this.number + ".");
    }

    // remove item
    item.delete();
  }

  /***********************************************************************
  * Throws error when item cannot be removed from order
  * 
  * @throws RuntimeException with message indicating items cannot be removed
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doRemoveItemError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot delete items from a picked up order");
    }
    throw new RuntimeException("Cannot delete items from a " + this.getStatus().name().toLowerCase() + " order");
  }

  /***********************************************************************
  * Cancels the order by deleting it
  * 
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doCancel() {
    // Logic for cancelling when in Started state
    this.delete();
  }

  /***********************************************************************
  * Throws error when order cannot be cancelled
  * 
  * @throws RuntimeException with message indicating order cannot be cancelled
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doCancelError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot cancel a picked up order");
    }
    throw new RuntimeException("Cannot cancel a " + this.getStatus().name().toLowerCase() + " order");
  }

  private doSchoolYearStart(){
    /****
    Date currentDate = new Date(System.currentTimeMillis());
    this.setDate(currentDate);
    ***/
  }

  /***********************************************************************
  * Throws error when attempting to pick up an already picked up order
  * 
  * @throws RuntimeException indicating order is already picked up
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPickedUpPickedUp(){
    throw new RuntimeException("The order is already picked up");
  }

  /***********************************************************************
  * Throws error when order cannot be picked up
  * 
  * @throws RuntimeException with message indicating order cannot be picked up
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPickedUpError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot pickup a picked up order");
    }
    throw new RuntimeException("Cannot pickup a " + this.getStatus().name().toLowerCase() + " order");
  }

  /***********************************************************************
  * Processes payment for an order
  * 
  * @param authorizationCode The payment authorization code
  * @throws RuntimeException if authorization code is invalid
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPaymentForOrder(String authorizationCode) {
    
    this.setAuthorizationCode(authorizationCode);
    this.setStatus(Status.Paid);
  }

  /***********************************************************************
  * Applies penalty effect to the order
  * 
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPenaltyEffect() {
    // Logic for applying a penalty effect
    
    // Dont need to set a penalty effect orders are do not store the auth code for verification
    // They just store it to express that they have been paid for using that code
    //This is a place holder
  }

  /***********************************************************************
  * Processes penalty payment for an order
  * 
  * @param penaltyAuthorizationCode The penalty payment authorization code
  * @param orderAuthorizationCode The order payment authorization code
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPaymentPenalty(String penaltyAuthorizationCode, String orderAuthorizationCode) {
    this.setPenaltyAuthorizationCode(penaltyAuthorizationCode);
    this.setAuthorizationCode(orderAuthorizationCode);
    // this.setPaymentDate(new Date());
  }

  /***********************************************************************
  * Throws error when penalty authorization code is invalid
  * 
  * @throws RuntimeException indicating invalid penalty authorization code
  * @author Jeffrey Lim
  ***********************************************************************/
  private doPaymentPenaltyAuthError() {
    throw new RuntimeException("Penalty authorization code is invalid");
  }

  /***********************************************************************
  * Returns an error for bad payment penalty cases 
  * 
  * 
  * @return Returns a penalty error code
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPaymentPenaltyError(){
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot pay penalty for a picked up order");
    }
    throw new RuntimeException("Cannot pay penalty for a " + this.getStatus().name().toLowerCase() + " order");
  }


  
  
  /***********************************************************************
  * Throws error when authorization code is invalid
  * 
  * @throws RuntimeException indicating invalid authorization code
  * @author Jeffrey Lim
  ***********************************************************************/
  private doPaymentAuthError() {
    throw new RuntimeException("Authorization code is invalid");
  }  

  /***********************************************************************
  * Returns error code for bad error states
  * 
  * @return Error message describing how payment is not possilbe in this state
  * @author Jeffrey Lim
  ***********************************************************************/
  private void doPaymentForOrderError(){
    if(this.getStatus().name().toLowerCase().equals("paid")){
      throw new RuntimeException("The order is already paid");
    }
    if(this.getStatus().name().toLowerCase().equals("pickedup")){
      throw new RuntimeException("Cannot pay for a picked up order");
    }
    throw new RuntimeException("Cannot pay for a " + this.getStatus().name().toLowerCase() + " order");
  }

  /***********************************************************************
  * Throws error when school year has already started
  * 
  * @throws RuntimeException indicating school year has already started
  * @author Jeffrey Lim
  ***********************************************************************/
  doSchoolYearStartError(){
    throw new RuntimeException("The school year has already been started");
  }

}
